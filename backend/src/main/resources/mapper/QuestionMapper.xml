<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.joyfully.springboot.mapper.QuestionMapper">
    <resultMap id="questionMap" type="com.joyfully.springboot.entity.Question">
        <result property="id" column="id"/>
        <result property="issue" column="issue"/>
        <result property="category" column="category"/>
        <result property="type" column="type"/>
        <result property="qUserId" column="q_user_id"/>
        <result property="share" column="share"/>
        <collection property="answerList" javaType="ArrayList" ofType="com.joyfully.springboot.entity.Answer">
            <result column="a_id" property="id"/>
            <result column="a_content" property="content"/>
            <result column="a_user_id" property="userId"/>
            <result column="user_name" property="userName"/>
            <result column="id" property="questionId"/>
        </collection>
    </resultMap>
    <select id="queryAllCategoryByUserId" resultType="java.lang.String">
        select category
        from `question`
        where q_user_id = #{userId}
    </select>
    <select id="queryRandomLimit" resultMap="questionMap">
        SELECT q1.*,
               `answer`.`id`      a_id,
               `answer`.`content` a_content,
               `answer`.`user_id` a_user_id,
               `name`             user_name
        FROM `question` AS q1
                 left join `answer` on `answer`.question_id = q1.id
                 left join `user` on `answer`.user_id = `user`.id
                 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `question`) - (SELECT MIN(id) FROM `question`)) +
                                    (SELECT MIN(id) FROM `question`)) AS id) AS q2
        WHERE q1.id >= q2.id
          and q1.share = 1
        ORDER BY q1.id
        LIMIT #{limit};
    </select>
    <select id="queryRandomLimitById" resultMap="questionMap">
        select q1.*,
               `answer`.`id`      a_id,
               `answer`.`content` a_content,
               `answer`.`user_id` a_user_id,
               `name`             user_name
        FROM `question` AS q1
                 left join `answer` on `answer`.question_id = q1.id
                 left join `user` on `answer`.user_id = `user`.id
                 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `question`) - (SELECT MIN(id) FROM `question`))
            + (SELECT MIN(id) FROM `question`)) AS id) AS q2

        WHERE q1.id >= q2.id
          and q1.q_user_id = #{id}
        ORDER BY q1.id
        LIMIT #{limit};
    </select>

    <!-- 此处的情况和UserMapper.xml类似，因为实际业务要求，此处需要用到where条件筛选-->
    <!--但是${ew.customSqlSegment}自带where前缀，怎么办呢？-->
    <!--此处笔者采用的办法是：-->
    <!--1、<where>节点：提供预置where前缀，防止Wrapper条件筛选为空时，同时也会去除前置的and，方便好用-->
    <!--2、<trim>节点：使用节点中的prefixOverrides指定要去除的字符串，这样就去除了${ew.customSqlSegment}中自带的where关键字-->
    <!--<select id="findPage" resultMap="questionMap">
        select `question`.*, `answer`.`id` a_id, `answer`.`content` a_content,
               `answer`.`user_id` a_user_id, `name` user_name
        from `question` left join `answer` on `answer`.question_id = `question`.id, `user`
        <where>
            <trim prefixOverrides="where">
                ${ew.customSqlSegment} and `answer`.user_id = `user`.id
            </trim>
        </where>
    </select>-->

    <!--findPage2.0，直接采用左连接+左连接来连接question、answer、user表-->
    <select id="findPage" resultMap="questionMap">
        select `question`.*,
               `answer`.`id`      a_id,
               `answer`.`content` a_content,
               `answer`.`user_id` a_user_id,
               `name`             user_name
        from `question`
                 left join `answer` on `answer`.question_id = `question`.id
                 left join `user` on `answer`.user_id = `user`.id
            ${ew.customSqlSegment}
    </select>

</mapper>